pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/huyen-nguyen-04/DevOps-Project-2.git'
        DOCKER_IMAGE_PREFIX = 'nthheulwen'
    }

    stages {
        stage ('Validate Git Branch') {
            when {
                expression { env.BRANCH_NAME?.startsWith('dev/') }
            }

            stages {
                stage('Get Latest Commit') {
                    steps {
                        script {
                            LATEST_COMMIT = sh(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
                            echo "Latest Commit Hash: ${LATEST_COMMIT}"
                        }
                    }
                }

                stage('Get Changed Service') {
                    steps {
                        script {
                            CHANGED_SERVICE = sh(script: """
                                git diff-tree -m --no-commit-id --name-only -r ${LATEST_COMMIT} | \
                                grep '^spring-petclinic-.*/' | \
                                head -n 1
                            """, returnStdout: true).trim().split('/')[0]
                            echo "Changed Service: ${CHANGED_SERVICE}"
                        }
                    }
                }

                stage('Build Docker Image') {
                    steps {
                        script {
                            sh """
                                ./mvnw clean install \
                                    -f ${CHANGED_SERVICE}/pom.xml \
                                    -P buildDocker \
                                    -Ddocker.image.prefix=${DOCKER_IMAGE_PREFIX} \
                                    -Ddocker.image.tag=${LATEST_COMMIT} 
                            """
                        }
                    }
                }

                stage('Push Docker Image') {
                    steps {
                        script {
                            DOCKER_IMAGE = "${DOCKER_IMAGE_PREFIX}/${CHANGED_SERVICE}:${LATEST_COMMIT}"
                            sh "docker push ${DOCKER_IMAGE}"
                            sh "docker rmi ${DOCKER_IMAGE}"
                            echo "Docker image ${DOCKER_IMAGE} pushed successfully."
                        }
                    }
                }
            }
        }
    }
}